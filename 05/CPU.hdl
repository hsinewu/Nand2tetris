// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Register
    Not (in=instruction[15], out=isA);
    Mux16 (a=outALU, b[0..14]=instruction[0..14], sel=isA, out=inA); // A overwritten by either A IS or C IS ALU
    Or (a=isA, b=instruction[5], out=loadA);  // write to A when A IS or C IS & d1 bit set
    ARegister (in=inA, load=loadA, out=outA, out[0..14]=addressM); // addressM

    // D Register
    And (a=instruction[15], b=instruction[4], out=loadD);
    DRegister (in=outALU, load=loadD, out=outD);

    // ALU
    Mux16 (a=outA, b=inM, sel=instruction[12], out=outAM);
    ALU (x=outD, y=outAM,
        zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM,
        zr=EQ, ng=LT);

    // PC
    Mux16 (a=outPC, b=outA, sel=jump, out=inPC);
    PC (in=inPC, load=jump, inc=true, reset=reset, out=outPC, out[0..14]=pc);

    // writeM: when it's C IS & d3 bit set
    And (a=instruction[15], b=instruction[3], out=writeM);

    // jump bit
    Or (a=LT, b=EQ, out=nGT);
    Not (in=nGT, out=GT);
    And (a=instruction[2], b=LT, out=jumpLT);
    And (a=instruction[1], b=EQ, out=jumpEQ);
    And (a=instruction[0], b=GT, out=jumpGT);
    Or (a=jumpLT, b=jumpEQ, out=jumpLE);
    Or (a=jumpLE, b=jumpGT, out=jumpLEG);
    And (a=jumpLEG, b=instruction[15], out=jump);
}